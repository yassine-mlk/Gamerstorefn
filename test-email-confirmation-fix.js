// Script de test pour v√©rifier que le probl√®me "Email not confirmed" est r√©solu
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://ljaaqattzvklzjftkyrq.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxqYWFxYXR0enZrbHpqZnRreXJxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgxMDIwMzAsImV4cCI6MjA2MzY3ODAzMH0.CXjABoRZWXmGuZdheAp-qsEqTOTqG-TVCj03aBd_e7M';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testEmailConfirmationFix() {
  console.log('üîç Test de r√©solution du probl√®me "Email not confirmed"...\n');

  try {
    // 1. Cr√©er un utilisateur de test
    console.log('1. Test de cr√©ation d\'utilisateur...');
    const testUser = {
      email: `test-fix-${Date.now()}@gamerstore.com`,
      password: 'testpassword123',
      name: 'Test User Fix',
      role: 'vendeur'
    };

    console.log(`üìß Email de test: ${testUser.email}`);

    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: testUser.email,
      password: testUser.password,
      options: {
        data: {
          name: testUser.name,
          role: testUser.role,
        }
      }
    });

    if (authError) {
      if (authError.message.includes('Email not confirmed')) {
        console.error('‚ùå Probl√®me "Email not confirmed" toujours pr√©sent');
        console.log('üí° Solutions √† appliquer :');
        console.log('   1. D√©sactiver la confirmation d\'email dans Supabase Dashboard');
        console.log('   2. Ex√©cuter le script fix-email-confirmation.sql');
        console.log('   3. Ou utiliser l\'API admin avec email_confirm: true');
        return false;
      } else {
        console.error('‚ùå Autre erreur:', authError.message);
        return false;
      }
    }

    console.log('‚úÖ Utilisateur cr√©√© sans erreur "Email not confirmed"');
    console.log('üìã ID utilisateur:', authData.user?.id);

    // 2. Tester la connexion imm√©diate
    console.log('\n2. Test de connexion imm√©diate...');
    const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
      email: testUser.email,
      password: testUser.password
    });

    if (signInError) {
      if (signInError.message.includes('Email not confirmed')) {
        console.error('‚ùå Connexion √©choue - email non confirm√©');
        console.log('üí° L\'utilisateur a √©t√© cr√©√© mais ne peut pas se connecter');
        return false;
      } else {
        console.error('‚ùå Erreur de connexion:', signInError.message);
        return false;
      }
    }

    console.log('‚úÖ Connexion r√©ussie imm√©diatement apr√®s cr√©ation');

    // 3. V√©rifier le statut de confirmation dans la base
    console.log('\n3. V√©rification du statut de confirmation...');
    
    // Note: Cette requ√™te n√©cessiterait des permissions sp√©ciales
    // En production, on v√©rifierait via l'API admin ou les logs
    console.log('üìã Utilisateur connect√© avec succ√®s, email probablement confirm√© automatiquement');

    // 4. Cr√©er le profil manuellement si n√©cessaire
    if (authData.user) {
      console.log('\n4. Cr√©ation du profil...');
      const { error: profileError } = await supabase
        .from('profiles')
        .insert({
          id: authData.user.id,
          email: testUser.email,
          name: testUser.name,
          role: testUser.role,
          status: 'actif'
        });

      if (profileError && !profileError.message.includes('duplicate')) {
        console.error('‚ùå Erreur cr√©ation profil:', profileError.message);
      } else {
        console.log('‚úÖ Profil cr√©√© ou existe d√©j√†');
      }
    }

    console.log('\nüéâ Test r√©ussi ! Le probl√®me "Email not confirmed" est r√©solu.');
    return true;

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error.message);
    return false;
  }
}

// Fonction pour tester les diff√©rentes solutions
async function testAllSolutions() {
  console.log('üîß Test de toutes les solutions pour "Email not confirmed"\n');
  
  const solutions = [
    'Solution 1: D√©sactiver confirmation email dans Dashboard',
    'Solution 2: Utiliser API admin avec email_confirm: true', 
    'Solution 3: Trigger SQL pour auto-confirmation'
  ];

  console.log('üìã Solutions disponibles:');
  solutions.forEach((solution, index) => {
    console.log(`   ${index + 1}. ${solution}`);
  });

  console.log('\nüß™ Ex√©cution du test...');
  const success = await testEmailConfirmationFix();
  
  if (success) {
    console.log('\n‚úÖ Au moins une solution fonctionne !');
  } else {
    console.log('\n‚ùå Aucune solution n\'est encore appliqu√©e.');
    console.log('üìñ Consultez SOLUTION-EMAIL-CONFIRMATION.md pour les instructions d√©taill√©es.');
  }
}

// Ex√©cuter le test
testAllSolutions(); 