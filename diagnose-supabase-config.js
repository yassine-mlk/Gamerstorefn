// Script de diagnostic pour la configuration Supabase
// Usage: node diagnose-supabase-config.js

import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// Charger les variables d'environnement
dotenv.config();

console.log('üîç DIAGNOSTIC CONFIGURATION SUPABASE\n');

// 1. V√©rifier les variables d'environnement
console.log('üìã 1. V√âRIFICATION DES VARIABLES D\'ENVIRONNEMENT');
console.log('================================================');

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl) {
  console.log('‚ùå VITE_SUPABASE_URL : MANQUANT');
} else {
  console.log(`‚úÖ VITE_SUPABASE_URL : ${supabaseUrl}`);
}

if (!supabaseAnonKey) {
  console.log('‚ùå VITE_SUPABASE_ANON_KEY : MANQUANT');
} else {
  console.log(`‚úÖ VITE_SUPABASE_ANON_KEY : ${supabaseAnonKey.substring(0, 20)}...`);
}

if (!supabaseServiceKey) {
  console.log('‚ùå VITE_SUPABASE_SERVICE_ROLE_KEY : MANQUANT');
  console.log('   üîß Solution : Ajoutez cette cl√© dans votre fichier .env');
  console.log('   üìç Trouvez-la dans Supabase Dashboard > Settings > API');
} else {
  console.log(`‚úÖ VITE_SUPABASE_SERVICE_ROLE_KEY : ${supabaseServiceKey.substring(0, 20)}...`);
}

console.log('\n');

// 2. Tester la connexion
if (supabaseUrl && supabaseAnonKey) {
  console.log('üîó 2. TEST DE CONNEXION SUPABASE');
  console.log('=================================');
  
  const supabase = createClient(supabaseUrl, supabaseAnonKey);
  
  try {
    // Test basic connection
    const { data, error } = await supabase.from('profiles').select('count');
    
    if (error) {
      console.log('‚ùå CONNEXION √âCHOU√âE');
      console.log(`   Erreur : ${error.message}`);
      
      if (error.message.includes('relation "public.profiles" does not exist')) {
        console.log('\nüí° SOLUTION :');
        console.log('   1. Allez dans Supabase Dashboard > SQL Editor');
        console.log('   2. Ex√©cutez le fichier create-profiles-table.sql');
        console.log('   3. V√©rifiez que la table profiles est cr√©√©e');
      }
    } else {
      console.log('‚úÖ CONNEXION R√âUSSIE');
      console.log('‚úÖ Table profiles accessible');
    }
  } catch (error) {
    console.log('‚ùå ERREUR DE CONNEXION :', error.message);
  }
  
  console.log('\n');
  
  // 3. Tester le client admin
  console.log('üëë 3. TEST DU CLIENT ADMIN');
  console.log('==========================');
  
  if (supabaseServiceKey) {
    try {
      const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey);
      
      // Test admin capabilities
      const { data: users, error: adminError } = await supabaseAdmin.auth.admin.listUsers();
      
      if (adminError) {
        console.log('‚ùå CLIENT ADMIN √âCHOU√â');
        console.log(`   Erreur : ${adminError.message}`);
        console.log('   üîß V√©rifiez que votre cl√© SERVICE_ROLE est correcte');
      } else {
        console.log('‚úÖ CLIENT ADMIN FONCTIONNEL');
        console.log(`‚úÖ ${users.users?.length || 0} utilisateurs trouv√©s`);
      }
    } catch (error) {
      console.log('‚ùå ERREUR CLIENT ADMIN :', error.message);
    }
  } else {
    console.log('‚ö†Ô∏è  CLIENT ADMIN NON CONFIGUR√â (cl√© SERVICE_ROLE manquante)');
  }
  
  console.log('\n');
  
  // 4. V√©rifier les admins existants
  console.log('üïµÔ∏è  4. V√âRIFICATION DES ADMINS');
  console.log('==============================');
  
  try {
    const { data: admins, error: adminError } = await supabase
      .from('profiles')
      .select('email, name, role')
      .eq('role', 'admin');
    
    if (adminError) {
      console.log('‚ùå IMPOSSIBLE DE V√âRIFIER LES ADMINS');
      console.log(`   Erreur : ${adminError.message}`);
    } else if (!admins || admins.length === 0) {
      console.log('‚ö†Ô∏è  AUCUN ADMIN TROUV√â');
      console.log('\nüí° SOLUTION POUR CR√âER UN ADMIN :');
      console.log('   1. Supabase Dashboard > Authentication > Users');
      console.log('   2. Cr√©ez un utilisateur avec m√©tadonn√©es :');
      console.log('      {"name": "Votre Nom", "role": "admin"}');
    } else {
      console.log(`‚úÖ ${admins.length} admin(s) trouv√©(s) :`);
      admins.forEach(admin => {
        console.log(`   - ${admin.name || admin.email} (${admin.email})`);
      });
    }
  } catch (error) {
    console.log('‚ùå ERREUR V√âRIFICATION ADMINS :', error.message);
  }
}

console.log('\n');

// 5. R√©sum√© et recommandations
console.log('üìã 5. R√âSUM√â ET RECOMMANDATIONS');
console.log('================================');

if (!supabaseUrl || !supabaseAnonKey) {
  console.log('üö® CONFIGURATION INCOMPL√àTE :');
  console.log('   - Cr√©ez un fichier .env √† la racine du projet');
  console.log('   - Ajoutez vos cl√©s Supabase');
  console.log('   - Red√©marrez l\'application');
} else if (!supabaseServiceKey) {
  console.log('‚ö†Ô∏è  CONFIGURATION PARTIELLE :');
  console.log('   - La cr√©ation de membres utilisera la m√©thode de fallback');
  console.log('   - Ajoutez VITE_SUPABASE_SERVICE_ROLE_KEY pour une exp√©rience optimale');
} else {
  console.log('‚úÖ CONFIGURATION COMPL√àTE');
  console.log('   - Toutes les cl√©s Supabase sont pr√©sentes');
  console.log('   - La cr√©ation de membres devrait fonctionner parfaitement');
}

console.log('\nüìö RESSOURCES UTILES :');
console.log('   - Guide : FIX_SERVICE_ROLE_CONFIGURATION.md');
console.log('   - Setup : SUPABASE_TEAM_MANAGEMENT_SETUP.md');
console.log('   - SQL : create-profiles-table.sql');

console.log('\nüéØ PROCHAINES √âTAPES :');
console.log('   1. Corrigez les probl√®mes identifi√©s ci-dessus');
console.log('   2. Red√©marrez l\'application : npm run dev');
console.log('   3. Testez la cr√©ation de membres dans la page Team');

console.log('\n‚ú® Diagnostic termin√© !'); 