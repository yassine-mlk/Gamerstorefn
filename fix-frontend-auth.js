// üîß Script de correction pour l'authentification frontend
// Ex√©cutez ce script dans la console du navigateur (F12) pour corriger les probl√®mes d'auth

console.log('üîß D√©but de la correction de l\'authentification frontend');

// 1. Nettoyer toutes les donn√©es d'authentification
function clearAllAuthData() {
  console.log('üßπ Nettoyage des donn√©es d\'authentification...');
  
  // Nettoyer le localStorage
  const keysToRemove = [];
  for (let i = 0; i < localStorage.length; i++) {
    const key = localStorage.key(i);
    if (key && (key.includes('supabase') || key.includes('auth') || key.includes('session'))) {
      keysToRemove.push(key);
    }
  }
  
  keysToRemove.forEach(key => {
    localStorage.removeItem(key);
    console.log(`üóëÔ∏è Supprim√©: ${key}`);
  });
  
  // Nettoyer le sessionStorage
  const sessionKeysToRemove = [];
  for (let i = 0; i < sessionStorage.length; i++) {
    const key = sessionStorage.key(i);
    if (key && (key.includes('supabase') || key.includes('auth') || key.includes('session'))) {
      sessionKeysToRemove.push(key);
    }
  }
  
  sessionKeysToRemove.forEach(key => {
    sessionStorage.removeItem(key);
    console.log(`üóëÔ∏è Supprim√© (session): ${key}`);
  });
  
  console.log('‚úÖ Nettoyage termin√©');
}

// 2. Se d√©connecter proprement
async function signOut() {
  try {
    console.log('üö™ D√©connexion...');
    
    if (typeof supabase !== 'undefined') {
      const { error } = await supabase.auth.signOut();
      if (error) {
        console.error('‚ùå Erreur lors de la d√©connexion:', error);
      } else {
        console.log('‚úÖ D√©connexion r√©ussie');
      }
    } else {
      console.log('‚ö†Ô∏è Supabase non disponible, d√©connexion forc√©e');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la d√©connexion:', error);
  }
}

// 3. Forcer le rafra√Æchissement de la page
function forceRefresh() {
  console.log('üîÑ Rafra√Æchissement forc√© de la page...');
  
  // Nettoyer le cache du navigateur
  if ('caches' in window) {
    caches.keys().then(names => {
      names.forEach(name => {
        caches.delete(name);
        console.log(`üóëÔ∏è Cache supprim√©: ${name}`);
      });
    });
  }
  
  // Forcer le rechargement
  setTimeout(() => {
    window.location.reload(true);
  }, 1000);
}

// 4. V√©rifier et corriger l'√©tat de l'authentification
async function fixAuthState() {
  try {
    console.log('üîß Correction de l\'√©tat d\'authentification...');
    
    if (typeof supabase === 'undefined') {
      console.error('‚ùå Supabase non disponible');
      return false;
    }
    
    // V√©rifier la session actuelle
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('‚ùå Erreur de session:', error);
      return false;
    }
    
    if (session) {
      console.log('‚úÖ Session valide trouv√©e');
      
      // V√©rifier si le token est expir√©
      const now = Math.floor(Date.now() / 1000);
      if (session.expires_at && session.expires_at < now) {
        console.warn('‚ö†Ô∏è Token expir√©, d√©connexion...');
        await signOut();
        return false;
      }
      
      // Tester l'acc√®s √† la base de donn√©es
      const { data, error: dbError } = await supabase
        .from('clients')
        .select('count')
        .limit(1);
      
      if (dbError) {
        console.error('‚ùå Erreur d\'acc√®s √† la base:', dbError);
        return false;
      }
      
      console.log('‚úÖ Acc√®s √† la base de donn√©es OK');
      return true;
    } else {
      console.log('‚ö†Ô∏è Aucune session active');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error);
    return false;
  }
}

// 5. Fonction principale de correction
async function fixFrontendAuth() {
  console.log('üöÄ D√©but de la correction...');
  
  // √âtape 1: Nettoyer les donn√©es
  clearAllAuthData();
  
  // √âtape 2: Se d√©connecter
  await signOut();
  
  // √âtape 3: Attendre un peu
  console.log('‚è≥ Attente de 2 secondes...');
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // √âtape 4: V√©rifier l'√©tat
  const isFixed = await fixAuthState();
  
  if (isFixed) {
    console.log('‚úÖ Correction r√©ussie! L\'authentification fonctionne.');
    console.log('üí° Vous pouvez maintenant tester l\'ajout de clients.');
  } else {
    console.log('‚ö†Ô∏è Correction partielle. Vous devrez vous reconnecter.');
    console.log('üí° Allez sur la page de connexion et reconnectez-vous.');
  }
  
  // √âtape 5: Rafra√Æchir la page
  console.log('üîÑ Rafra√Æchissement de la page dans 3 secondes...');
  setTimeout(() => {
    forceRefresh();
  }, 3000);
}

// Ex√©cuter la correction
fixFrontendAuth(); 