// Script de test pour diagnostiquer les probl√®mes de cr√©ation d'utilisateurs
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://ljaaqattzvklzjftkyrq.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxqYWFxYXR0enZrbHpqZnRreXJxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgxMDIwMzAsImV4cCI6MjA2MzY3ODAzMH0.CXjABoRZWXmGuZdheAp-qsEqTOTqG-TVCj03aBd_e7M';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testTeamCreation() {
  console.log('üîç Test de cr√©ation d\'utilisateur...\n');

  try {
    // 1. V√©rifier la connexion √† Supabase
    console.log('1. Test de connexion √† Supabase...');
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    if (sessionError) {
      console.error('‚ùå Erreur de session:', sessionError.message);
      return;
    }
    console.log('‚úÖ Connexion Supabase OK');

    // 2. V√©rifier l'existence de la table profiles
    console.log('\n2. V√©rification de la table profiles...');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .limit(1);
    
    if (profilesError) {
      console.error('‚ùå Erreur table profiles:', profilesError.message);
      console.log('üí° Solution: Cr√©ez la table profiles avec le script create-profiles-table.sql');
      return;
    }
    console.log('‚úÖ Table profiles accessible');

    // 3. Test de cr√©ation d'utilisateur
    console.log('\n3. Test de cr√©ation d\'utilisateur...');
    const testUser = {
      email: `test-${Date.now()}@gamerstore.com`,
      password: 'testpassword123',
      name: 'Test User',
      role: 'vendeur'
    };

    console.log(`üìß Email de test: ${testUser.email}`);

    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: testUser.email,
      password: testUser.password,
      options: {
        data: {
          name: testUser.name,
          role: testUser.role,
        }
      }
    });

    if (authError) {
      console.error('‚ùå Erreur cr√©ation auth:', authError.message);
      
      // Diagnostics sp√©cifiques
      if (authError.message.includes('User already registered')) {
        console.log('üí° L\'utilisateur existe d√©j√†');
      } else if (authError.message.includes('Invalid email')) {
        console.log('üí° Format d\'email invalide');
      } else if (authError.message.includes('Password')) {
        console.log('üí° Probl√®me avec le mot de passe (min 6 caract√®res)');
      } else if (authError.message.includes('signup')) {
        console.log('üí° L\'inscription pourrait √™tre d√©sactiv√©e dans Supabase');
      }
      return;
    }

    console.log('‚úÖ Utilisateur auth cr√©√©:', authData.user?.id);

    // 4. V√©rifier la cr√©ation du profil
    if (authData.user) {
      console.log('\n4. V√©rification du profil...');
      
      // Attendre un peu pour le trigger
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', authData.user.id)
        .single();

      if (profileError) {
        console.error('‚ùå Erreur r√©cup√©ration profil:', profileError.message);
        
        // Essayer de cr√©er manuellement
        console.log('üîß Tentative de cr√©ation manuelle du profil...');
        const { error: insertError } = await supabase
          .from('profiles')
          .insert({
            id: authData.user.id,
            email: testUser.email,
            name: testUser.name,
            role: testUser.role,
            status: 'actif'
          });

        if (insertError) {
          console.error('‚ùå Erreur cr√©ation manuelle:', insertError.message);
        } else {
          console.log('‚úÖ Profil cr√©√© manuellement');
        }
      } else {
        console.log('‚úÖ Profil trouv√©:', profile);
      }
    }

    console.log('\nüéâ Test termin√© avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error.message);
  }
}

// Ex√©cuter le test
testTeamCreation(); 